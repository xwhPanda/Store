package com.jiqu.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.jiqu.database.Appinfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "APPINFO".
*/
public class AppinfoDao extends AbstractDao<Appinfo, Integer> {

    public static final String TABLENAME = "APPINFO";

    /**
     * Properties of entity Appinfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property GameName = new Property(0, Short.class, "gameName", false, "GAME_NAME");
        public final static Property GameId = new Property(1, Integer.class, "gameId", true, "GAME_ID");
        public final static Property CurrentSize = new Property(2, Long.class, "currentSize", false, "CURRENT_SIZE");
        public final static Property GameSize = new Property(3, Long.class, "gameSize", false, "GAME_SIZE");
        public final static Property DownloadState = new Property(4, Integer.class, "downloadState", false, "DOWNLOAD_STATE");
        public final static Property DownloadUrl = new Property(5, String.class, "downloadUrl", false, "DOWNLOAD_URL");
        public final static Property GameIconUrl = new Property(6, String.class, "gameIconUrl", false, "GAME_ICON_URL");
        public final static Property SavePath = new Property(7, String.class, "savePath", false, "SAVE_PATH");
    };


    public AppinfoDao(DaoConfig config) {
        super(config);
    }
    
    public AppinfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"APPINFO\" (" + //
                "\"GAME_NAME\" INTEGER," + // 0: gameName
                "\"GAME_ID\" INTEGER PRIMARY KEY ," + // 1: gameId
                "\"CURRENT_SIZE\" INTEGER," + // 2: currentSize
                "\"GAME_SIZE\" INTEGER," + // 3: gameSize
                "\"DOWNLOAD_STATE\" INTEGER," + // 4: downloadState
                "\"DOWNLOAD_URL\" TEXT," + // 5: downloadUrl
                "\"GAME_ICON_URL\" TEXT," + // 6: gameIconUrl
                "\"SAVE_PATH\" TEXT);"); // 7: savePath
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"APPINFO\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Appinfo entity) {
        stmt.clearBindings();
 
        Short gameName = entity.getGameName();
        if (gameName != null) {
            stmt.bindLong(1, gameName);
        }
 
        Integer gameId = entity.getGameId();
        if (gameId != null) {
            stmt.bindLong(2, gameId);
        }
 
        Long currentSize = entity.getCurrentSize();
        if (currentSize != null) {
            stmt.bindLong(3, currentSize);
        }
 
        Long gameSize = entity.getGameSize();
        if (gameSize != null) {
            stmt.bindLong(4, gameSize);
        }
 
        Integer downloadState = entity.getDownloadState();
        if (downloadState != null) {
            stmt.bindLong(5, downloadState);
        }
 
        String downloadUrl = entity.getDownloadUrl();
        if (downloadUrl != null) {
            stmt.bindString(6, downloadUrl);
        }
 
        String gameIconUrl = entity.getGameIconUrl();
        if (gameIconUrl != null) {
            stmt.bindString(7, gameIconUrl);
        }
 
        String savePath = entity.getSavePath();
        if (savePath != null) {
            stmt.bindString(8, savePath);
        }
    }

    /** @inheritdoc */
    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1);
    }    

    /** @inheritdoc */
    @Override
    public Appinfo readEntity(Cursor cursor, int offset) {
        Appinfo entity = new Appinfo( //
            cursor.isNull(offset + 0) ? null : cursor.getShort(offset + 0), // gameName
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // gameId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // currentSize
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // gameSize
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // downloadState
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // downloadUrl
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // gameIconUrl
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // savePath
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Appinfo entity, int offset) {
        entity.setGameName(cursor.isNull(offset + 0) ? null : cursor.getShort(offset + 0));
        entity.setGameId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setCurrentSize(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setGameSize(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setDownloadState(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setDownloadUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setGameIconUrl(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSavePath(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Integer updateKeyAfterInsert(Appinfo entity, long rowId) {
        return entity.getGameId();
    }
    
    /** @inheritdoc */
    @Override
    public Integer getKey(Appinfo entity) {
        if(entity != null) {
            return entity.getGameId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
